From a0b31db0abebb3eb269665e55467227a1521bd57 Mon Sep 17 00:00:00 2001
From: Razvan Cojocaru <rcojocaru@bitdefender.com>
Date: Mon, 11 May 2015 18:07:21 +0300
Subject: [PATCH 25/26] xen, libxc: Introduced XEN_DOMCTL_set_emulated_reps

Added xc_domain_set_emulated_reps(). It can enable or disable
hypervisor-level REP optimization when emulating a REP instruction.

Signed-off-by: Razvan Cojocaru <rcojocaru@bitdefender.com>
---
 tools/libxc/include/xenctrl.h    |  3 +++
 tools/libxc/xc_domain.c          | 17 +++++++++++++++++
 xen/arch/x86/hvm/emulate.c       |  2 +-
 xen/common/domctl.c              |  5 +++++
 xen/common/vm_event.c            |  5 +++++
 xen/include/asm-x86/hvm/domain.h |  1 +
 xen/include/public/domctl.h      |  8 ++++++++
 7 files changed, 40 insertions(+), 1 deletion(-)

diff --git a/tools/libxc/include/xenctrl.h b/tools/libxc/include/xenctrl.h
index 046a911..96e7e5c 100644
--- a/tools/libxc/include/xenctrl.h
+++ b/tools/libxc/include/xenctrl.h
@@ -599,6 +599,9 @@ int xc_domain_shutdown(xc_interface *xch,
                        uint32_t domid,
                        int reason);
 
+int xc_domain_set_emulated_reps(xc_interface *xch, uint32_t domid,
+                                int on_off);
+
 int xc_watchdog(xc_interface *xch,
 		uint32_t id,
 		uint32_t timeout);
diff --git a/tools/libxc/xc_domain.c b/tools/libxc/xc_domain.c
index b64eb69..ee1bea2 100644
--- a/tools/libxc/xc_domain.c
+++ b/tools/libxc/xc_domain.c
@@ -151,6 +151,23 @@ int xc_domain_shutdown(xc_interface *xch,
     return ret;
 }
 
+int xc_domain_set_emulated_reps(xc_interface *xch, uint32_t domid,
+                                int on_off)
+{
+    int ret = -1;
+    DECLARE_DOMCTL;
+
+    domctl.cmd = XEN_DOMCTL_set_emulated_reps;
+    domctl.domain = (domid_t)domid;
+    domctl.u.set_emulated_reps.op = on_off;
+
+    ret = do_domctl(xch, &domctl);
+
+    if ( ret == -ESRCH )
+        errno = ENOENT;
+
+    return ret;
+}
 
 int xc_domain_node_setaffinity(xc_interface *xch,
                                uint32_t domid,
diff --git a/xen/arch/x86/hvm/emulate.c b/xen/arch/x86/hvm/emulate.c
index 4954a92..30a1868 100644
--- a/xen/arch/x86/hvm/emulate.c
+++ b/xen/arch/x86/hvm/emulate.c
@@ -428,7 +428,7 @@ static int hvmemul_virtual_to_linear(
      * being triggered for repeated writes to a whole page.
      */
     *reps = min_t(unsigned long, *reps,
-                  unlikely(current->domain->arch.mem_access_emulate_enabled)
+                  unlikely(current->domain->arch.mem_access_emulate_enabled && !current->domain->arch.hvm_domain.emulated_reps)
                            ? 1 : 4096);
 
     reg = hvmemul_get_seg_reg(seg, hvmemul_ctxt);
diff --git a/xen/common/domctl.c b/xen/common/domctl.c
index f18d860..be6be89 100644
--- a/xen/common/domctl.c
+++ b/xen/common/domctl.c
@@ -1219,6 +1219,11 @@ long do_domctl(XEN_GUEST_HANDLE_PARAM(xen_domctl_t) u_domctl)
         break;
     }
 
+    case XEN_DOMCTL_set_emulated_reps:
+        d->arch.hvm_domain.emulated_reps = op->u.set_emulated_reps.op;
+        ret = 0;
+        break;
+
     case XEN_DOMCTL_monitor_op:
         ret = -EPERM;
         if ( current->domain == d )
diff --git a/xen/common/vm_event.c b/xen/common/vm_event.c
index 4d7cd01..d31c7f2 100644
--- a/xen/common/vm_event.c
+++ b/xen/common/vm_event.c
@@ -654,6 +654,11 @@ int vm_event_domctl(struct domain *d, xen_domctl_vm_event_op_t *mec,
             rc = vm_event_enable(d, mec, med, _VPF_mem_access,
                                     HVM_PARAM_MONITOR_RING_PFN,
                                     monitor_notification);
+            if ( !rc && hvm_funcs.enable_msr_exit_interception )
+            {
+                d->arch.hvm_domain.emulated_reps = 1;
+                hvm_funcs.enable_msr_exit_interception(d);
+            }
             break;
 
         case XEN_VM_EVENT_DISABLE:
diff --git a/xen/include/asm-x86/hvm/domain.h b/xen/include/asm-x86/hvm/domain.h
index 0e4933c..dd321c2 100644
--- a/xen/include/asm-x86/hvm/domain.h
+++ b/xen/include/asm-x86/hvm/domain.h
@@ -135,6 +135,7 @@ struct hvm_domain {
     bool_t                 mem_sharing_enabled;
     bool_t                 qemu_mapcache_invalidate;
     bool_t                 is_s3_suspended;
+    bool_t                 emulated_reps;
 
     /*
      * TSC value that VCPUs use to calculate their tsc_offset value.
diff --git a/xen/include/public/domctl.h b/xen/include/public/domctl.h
index 6a6d3d6..ebf6180 100644
--- a/xen/include/public/domctl.h
+++ b/xen/include/public/domctl.h
@@ -1085,6 +1085,12 @@ struct xen_domctl_runstate_info {
 typedef struct xen_domctl_runstate_info xen_domctl_runstate_info_t;
 DEFINE_XEN_GUEST_HANDLE(xen_domctl_runstate_info_t);
 
+struct xen_domctl_set_emulated_reps {
+    int32_t op;
+};
+typedef struct xen_domctl_set_emulated_reps xen_domctl_set_emulated_reps_t;
+DEFINE_XEN_GUEST_HANDLE(xen_domctl_set_emulated_reps_t);
+
 /* All vcpus are running */
 #define DOMAIN_RUNSTATE_full_run           0
 
@@ -1187,6 +1193,7 @@ struct xen_domctl {
 #define XEN_DOMCTL_arm_configure_domain          76
 #define XEN_DOMCTL_monitor_op                    77
 #define XEN_DOMCTL_get_runstate_info             98
+#define XEN_DOMCTL_set_emulated_reps            100
 #define XEN_DOMCTL_gdbsx_guestmemio            1000
 #define XEN_DOMCTL_gdbsx_pausevcpu             1001
 #define XEN_DOMCTL_gdbsx_unpausevcpu           1002
@@ -1253,6 +1260,7 @@ struct xen_domctl {
         struct xen_domctl_cacheflush        cacheflush;
         struct xen_domctl_gdbsx_pauseunp_vcpu gdbsx_pauseunp_vcpu;
         struct xen_domctl_gdbsx_domstatus   gdbsx_domstatus;
+        struct xen_domctl_set_emulated_reps set_emulated_reps;
         struct xen_domctl_vnuma             vnuma;
         struct xen_domctl_psr_cmt_op        psr_cmt_op;
         struct xen_domctl_monitor_op        monitor_op;
-- 
2.5.0

